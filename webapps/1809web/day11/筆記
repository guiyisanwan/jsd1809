###课程回顾
1. 数据类型
- 字符串 string
- 数值 number
- 布尔值 boolean
- 对象类型 object     typeof null  object
- 未定义 undefined 
2. 变量声明和赋值
- js属于弱类型语言
- var x = 10;  x=true;
3. 数据类型间的隐式转换
- 字符串： 转数值（能转直接转，不能转 NaN） "18a"  转布尔值(""转false其它true)   if("abc")
- 数值：转字符串直接转  转布尔值（0和NaN是false 其它是true）
- 布尔值：转字符串直接转  转数值（true是1  false是0）
- undefined： 转字符串直接转， 转布尔值false ，转数值NaN
- null：转字符串直接转，转布尔值false，转数值0
4. 运算符
- ==和===  ==先统一类型再比较值   ===先比较类型 如果类型统一再比较值
- teypeof 66 + 6 = "number6";
- 除法 会根据结果自动转整数和小数
6. 语句 
- for循环把 int i 改成 var i  不支持foreach
- if和while括号里面的内容如果不是布尔值会自动隐式转换成布尔值
7. 方法声明
- 第一种： function 方法名(参数列表){方法体}
- 第二种：var 方法名 = function(参数列表){方法体}
- 第三种： var 方法名 = new Function("参数1","参数2","方法体");
8. 字符串相关：
- 创建字符串  var s = "";   var s = new String();
- 字符串转数值  parseInt() parseFloat() Number()
- 获取字符串出现的位置  str.indexOf("a")  str.lastIndexOf("a");\
- 转大小写   str.toUpperCase()  str.toLowerCase();
- 拆分字符串  var arr = str.split(",");
- 替换字符串  str.replace("old","new");
9. 数组相关
- 创建数组 var arr = ["abc",true,18];  var arr = new Array();
- 添加内容   arr.push(20);
- 获取数据和Java一样
- 数组反转 arr.reverse();
- 数组排序 arr.sort(); 通过Unicode编码进行排序  
	自定义排序： 
	function 方法名(a,b){return a-b升序/b-a降序;}
10. 四舍五入  3.1415926.toFixed(3);
11. 正则表达式：
- 两种创建方式：
	1. var reg = /规则/模式;   模式：i忽略大小写  g全局查找
	2. var reg = new RegExp("规则",?"模式");
- 查找： reg.exec(str); //每次执行只查找到一个 找不到后会返回null
- 校验： reg.test(str); 
- 查找： str.match(reg); //查找到所有符合规则的内容 返回值为数组
- 查找替换： str.replace(reg,"new");
12. 页面相关
- 通过id获取元素对象  var d = document.getElementById("id");
- 获取和设置文本框的内容  input.value="abc";
- 给元素添加文本内容  d.innerText = "<h1>abc</h1>";
- 给元素添加文本或html内容 d.innerHTML="<h1>abc</h1>";
13. 日期相关、
- 创建日期对象  var d = new Date();//得到客户端当前时间
- 把字符串时间转成时间对象 var d = new Date("2018/10/20 23:18:33");
- 获取和设置时间戳  d.getTime();  d.setTime(1000);
- 获取时间分量： getFullYear/Month/Date/Hours/Minutes/Seconds/Day()
- 获取年月日  和  获取时分秒   d.toLocaleDateString()  d.toLocalTimeString();


###给元素对象添加样式
	div.style.样式名称="样式的值";

###元素隐藏的两种方式
1. visibility="hidden" //不脱离文档流 元素隐藏后仍然占位置
2. display="none"   //脱离文档流 不占位置



###Low轮播图实现步骤：
1. 在页面中添加一个div 在div里面添加三个img
2. 通过内部样式让img和div设置相同宽200高150
3. 在script标签中添加定时器 每隔1秒执行代码
4. 声明一个全局的count，在定时器中自增并且对3取余数 
5. 在定时器中获取所有图片并且遍历
6. 遍历时判断i的值是否等于第4步得到的余数，如果相等让当前遍历的图片元素显示，如果不等则让图片隐藏

####定时器
1. var timer = setInterval(方法,时间间隔)  每隔一段时间调用一次方法
	停止：clearInterval(timer)
2. setTimeout(方法,时间间隔)  隔一段时间调用一次方法（只执行一次）

###DOM 文档对象模型(包含和页面相关的内容)
- 学习DOM主要学习的就是如何对页面中的元素进行增删改查操作
####查找页面中的元素
1. 通过id查找元素
	var div = document.getElementById("id");
2. 通过标签名查找元素
	var arr = document.getElementsByTagName("标签名");
3. 通过class查找元素
	var arr = document.getElementsByClassName("class");
4. 通过name属性值查找元素
	var arr = document.getElementsByName("name");
5. 获取页面中body元素
	document.body
6. 获取元素的上级元素
	div.parentElement
###创建元素对象
	var h3 = document.createElement("h3");
	h3.innerHTML="我是h3";
###添加元素
	父元素.appendChild(h3);
###插入元素
	父元素.insertBefore(新元素,弟弟元素);
###删除元素
	父元素.removeChild(删除的元素); 
	删除的元素.parentElement.removeChild(删除的元素);

###事件的动态绑定
- 通过js代码给元素添加事件称为 事件的动态绑定，动态绑定的事件方法中的this代表事件源（添加事件的标签）


###鼠标大战僵尸步骤：
1. 开启定时器每隔1秒执行一次，在定时器里面创建img图片 设置图片为zomb0.png,然后把图片添加到body里面
2. 通过css让img标签的定位方式为绝对定位，设置图片的宽80 高90
3. 在创建完img标签的位置设置img图片的位置left为屏幕的宽度，top为屏幕高的随机值
4. 开启另外一个定时器，每秒执行100次，在定时器里面获取所有img，然后遍历，获取每一个img标签 修改其left值 让left值-2 再赋值回去，则可以实现僵尸移动的功能

###js中的事件
- 什么是事件： 指一些特定的时间点，事件包括：鼠标事件、键盘事件、状态改变事件。
- 鼠标事件： onclick(点击事件)  onmouseover(鼠标移入事件) onmouseout(鼠标移出事件),  onmousedown(鼠标按下) onmouseup(鼠标松开) onmousemove(鼠标移动)
- 状态改变事件： onload(页面加载完成事件) onfocus(获取焦点事件) onblur(失去焦点事件) onsubmit(提交事件) onchange(value值改变事件) onresize(窗口尺寸改变事件)
- 键盘事件： onkeydown(键盘按下事件)  onkeyup(键盘抬起事件)
###事件绑定
1. 标签内部通过事件属性添加事件 ， 事件方法中的this代表Window对象
2. 动态绑定事件，好处：可以让js代码和html代码分离 ，动态绑定事件的方法中的this代表事件源
###事件取消
- 在事件中执行return false； 则可以取消当前事件
###事件对象event
1. 在鼠标事件中可得到鼠标的坐标  event.clientX/Y()
2. 在键盘事件中可以得到键盘按键的编码 event.keyCode();
3. 在任何事件中可以得到事件源  event.target  event.srcElement 
	var obj = event.target||event.srcElement;
###事件传递(事件冒泡)
- 如果一个范围有多个事件需要响应，则响应顺序为从底层往上层传递，这个过程类似于冒泡效果，所以又称为事件冒泡 
































