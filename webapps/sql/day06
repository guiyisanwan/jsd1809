###课程回顾
1. 关联关系
- 一对一： AB两张表 A表中的一条对应B表中的一条，同时B表中的一条对应A表中的一条， 在从表中添加外键指向主表的主键
- 一对多： AB两张表 A表中的一条数据对应B表中的多条，同时B表中的一条对应A表中的一条，在多的表中添加外键指向另外一张表的主键
- 多对多： AB两张表 A表中的一条对应B表中的多条，同时B表中的一条对应A表中的多条数据，通过新建一张关系表建立关系
2. 权限管理案例： 3张主表：用户表 角色表 权限表   2张关系表：用户角色关系表，角色权限关系表

###面试题
1. 创建表 
	交易流水表： 交易号   交易时间  交易金额  交易类型  person_id 
	人物表： id 姓名 性别 关系 
	create table trade(id int primary key auto_increment,time datetime,money int,type varchar(10),person_id int);
	create table person(id int primary key auto_increment,name varchar(10),gender varchar(5), rel varchar(5));
2. 插入以下数据
	刘德华 男 亲戚 微信 发-20   2018-04-20
	杨幂 女 亲戚  现金  收500  发-50  2018-05-15
	马云 男 同事  支付宝 收20000 发-20  2018-05-20
	特朗普 男 朋友 微信 收2000  2018-04-22
	貂蝉 女 朋友 微信  发-20000  2018-03-14
	
	insert into person values(null,'刘德华','男','亲戚'),(null,'杨幂','女','亲戚'),(null,'马云','男','同事'),(null,'特朗普','男','朋友'),(null,'貂蝉','女','朋友');
	
	insert into trade values(null,'2018-4-20',-20,'微信',1),(null,'2018-5-15',500,'现金',2),(null,'2018-5-15',-50,'现金',2),(null,'2018-05-20',20000,'支付宝',3),(null,'2018-5-20',-20,'支付宝',3),(null,'2018-04-22',2000,'微信',4),(null,'2018-03-14',-20000,'微信',5);
3. 统计2018年2月15号到现在的所有红包收益
	select sum(money) from trade where time>str_to_date('2018年2月15号','%Y年%c月%d号');
4. 统计2018年2月15号到现在 金额大于100 所有女性亲戚的名字和红包金额
	select p.name,t.money
	from trade t join person p
	on t.person_id=p.id
	where t.money not between -100 and 100 and p.gender='女'
	and p.rel='亲戚' and time>str_to_date('2018年2月15号','%Y年%c月%d号');
5. 查询三个平台分别收入的红包金额
	select type,sum(money) from trade 
	where money>0 group by type;
###视图
- 什么是视图：视图和表都是数据库中的对象，视图可以理解成一张虚拟的表，视图本质就是取代了一段SQL查询语句
- 为什么使用视图：可以起到SQL语句重用的作用，隐藏敏感信息
- 创建视图的格式：
	create view 视图名 as (子查询);//创建了一个虚拟的表
	create table 表名 as (子查询);  //创建了一张真实存在的表
1. 创建一个10号部门员工的视图
	create view v_emp_10 as (select * from emp where deptno=10);
	select * from v_emp_10; 
2. 创建一个20号部门并且工资小于2000的视图
	create view v_emp_20 as (select * from emp where deptno=20 and sal<2000);
3. 创建一个没有工资的员工表的视图
	create view v_emp_nosal as (select empno,ename,job,mgr,hiredate,comm,deptno from emp);
	select * from v_emp_nosal;
4. 创建每个部门平均工资，最高工资，最底工资，工资总和，部门人数的视图
	create view v_emp_info as (select deptno,avg(sal),max(sal),min(sal),sum(sal),count(*) from emp group by deptno);
####视图的分类
1. 简单视图：创建视图的子查询中不包含：去重、函数、分组、关联查询的视图称为简单视图，可以对视图中的数据进行增删改查操作
2. 复杂视图：和简单视图相反，只能查询
####对简单视图进行增删改操作
1. 插入数据
	insert into v_emp_10 (empno,ename,sal,deptno) values(10010,'张三',888,10);
	select * from v_emp_10; //视图和原表中都存在
	- 测试往v_emp_10中插入一条部门编号为20号的数据
	insert into v_emp_10 (empno,ename,sal,deptno) values(10011,'李四',666,20);
	select * from v_emp_10; //视图中没有，原表中存在
- 往视图中插入一条视图中不可见但是原表中可见的数据 称为数据污染，可以通过 with check option 关键字解决数据污染的问题
	create view v_emp_30 as (select * from emp where deptno=30) with check option;
	insert into v_emp_30 (empno,ename,sal,deptno) values(10012,'王五',555,30);//成功！
	insert into v_emp_30 (empno,ename,sal,deptno) values(10013,'赵六',666,20);//失败！
2. 修改数据  只能修改视图中存在的数据
	update v_emp_10 set comm=comm+1;  //修改成功
	update v_emp_10 set sal=1000 where deptno=20; //修改失败
3. 删除数据 只能删除视图中存在的数据
	delete from v_emp_10 where ename='张三';//成功
	delete from v_emp_10 where ename='James';//失败 视图中不存在
####视图别名
- 如果创建视图的时候子查询使用了别名，则后期对视图进行操作时只能使用别名
	create view v_emp_name as (select ename name,sal from emp);
	select * from v_emp_name where name='王五';//成功
	select * from v_emp_name where ename='王五';//失败
####视图总结
1. 视图是数据库中的对象，代表一段SQL语句，可以理解成一张虚拟表
2. 作用： 重用SQL、 隐藏敏感信息
3. 分类： 简单视图（不包含去重、函数、分组、关联查询，可以进行增删改查）和复杂视图（和简单视图相反，只能查询）
4. 插入数据的数据污染问题 通过with check option解决
5. 修改和删除数据只能操作视图中存在的数据
6. 创建视图起别名的话 后期操作只能使用别名
####约束
- 什么是约束： 约束是给表字段添加的限制条件
####非空约束 not null
- 字段值不能为null 
	create table t1(id int, age int not null);
	-测试：
	insert into t1 values(1,20);//成功
	insert into t1 values(2,null);//失败
####唯一约束 unique
- 字段值不能重复
	create table t2(id int,age int unique);
	-测试：
	insert into t2 values(1,20);//成功
	insert into t2 values(2,20);//失败 数据重复
####默认约束 default
- 给字段设置默认值
	create table t3(id int,age int default 20);
	-测试：
	insert into t3 (id) values (1);  //默认值生效
	insert into t3 values(2,18); 	//默认值不生效
	insert into t3 values(3,null); //默认值不生效
####主键约束
- 唯一且非空
####外键约束
- 外键约束：添加外键约束的字段，值可以为null，可以重复，但是不能是关联表中不存在的数据，被关联的数据不能被先删除，被关联的表不能先删除
- 如何使用外键约束
	create database db6 character set utf8;
	1. 创建部门表
		create table dept(id int primary key auto_increment,name varchar(10));
	2. 创建员工表
		create table emp(id int primary key auto_increment,name varchar(10),dept_id int,constraint fk_dept foreign key(dept_id) references dept(id));
	-格式介绍： constraint 约束名 foreign key(外键字段名) references 关联的表名(关联的字段名)
	insert into dept values(null,'神仙'),(null,'妖怪');
	-测试：
	insert into emp values(null,'悟空',1);//成功
	insert into emp values(null,'赛亚人',3);//失败
	insert into emp values(null,'赛亚人',null);//成功
	delete from dept where id=1;//失败 因为悟空依赖神仙
	delete from emp where id=1;//成功 删除悟空
	delete from dept where id=1;//成功 因为没有数据依赖神仙
	
- 删除外键约束方式 
	alter table emp drop foreign key fk_dept; 
- 删除主键约束
	
	create table t1(id int primary key);
	alter table t1 drop primary key; //可以删除
	
	create table t2(id int primary key auto_increment);
	alter table t2 drop primary key;//由于主键带自增 不能删除主键 

###索引
- 什么是索引： 索引是数据库中用于提高查询效率的技术，类似于目录
- 为什么使用索引：如果不使用索引，数据会零散的保存在磁盘块中，查询数据需要挨个遍历每一个磁盘块，直到找到数据为止，使用索引后会将磁盘块以树桩结构进行保存，查询数据时会大大降低磁盘块的访问数量，从而提高查询效率。
#####索引是越多越好吗？
- 不是，因为索引会占用存储空间，只针对常用的查询字段创建索引。
#####有索引就一定好吗？
- 如果数据量小，添加索引反而会降低查询效率。

#####导入数据
1. window系统：
		source d:/item_backup.sql;
2. linux系统：
		source /home/soft01/桌面/item_backup.sql;
 - 测试 查询title='100'的数据看耗时 1.09      
	select * from item2 where title='100';

####如何创建索引
- 格式：create index 索引名 on 表名(字段名(字段长度));
		create index i_item_title on item2(title);

	-再次测试：select * from item2 where title='100'; 耗时0.04

####索引分类(了解)
1. 聚集索引：给表添加主键约束的时候数据库会自动通过主键创建索引，这个索引称为聚集索引。  聚集索引的磁盘块中保存数据
2. 非聚集索引：通过其它字段创建的索引称为非聚集索引，非聚集索引的磁盘块中只保存磁盘块的地址没有数据（因为数据只需要有一份）
#####如何查看索引
- show index from item2;
#####如何删除索引
- 格式： drop index 索引名 on 表名;
	drop index i_item_title on item2;
####复合索引
- 通过多个字段创建的索引
- 格式： create index 索引名 on 表名(字段1,字段2);
	create index i_item_title_price on item2(title,price);
####索引总结
1. 索引是用来提高查询效率的技术，类似目录
2. 因为索引会占用存储空间，并非越多越好
3. 因为数据量小时添加索引会降低查询效率，所以不是有索引就一定好
4. 索引分类：聚集索引（添加主键约束会自动创建，磁盘块中保存数据）和非聚集索引（通过其它字段创建的索引，保存地址没有数据）
5. 复合索引，通过多个字段创建的索引称为复合索引
####事务
- 数据库中执行同一业务多条SQL语句的工作单元，可以保证全部执行成功，或全部执行失败
#####事务的ACID特性 是保证事务正确执行的四大基本要素
- Atomicity：原子性，最小不可拆分，保证全部成功全部失败 
- Consistency：一致性，从一个一致状态到另一个一致状态 
- Isolation：隔离性，多个事务之间互不影响 
- Durability：持久性，事务完成后数据提交到数据库中持久生效
####事务相关指令 
- begin：开启事务
- commit：提交事务
- rollback：回滚事务
- savepoint xxx：保存回滚点
- rollback to xxx：回滚到指定的回滚点 
- 查看数据库自动提交状态 
	show variables like '%autocommit%';
- 修改自动提交的状态  0关闭  1开启
	set autocommit=0/1;

###group_concat()
- 查询员工表每个部门的员工姓名 ，每个部门的名字显示到一行
	select deptno,group_concat(ename) from emp group by deptno;
- 查询员工表每个部门中每个员工的姓名和工资，要求每个部门的信息显示到一行
	select deptno,group_concat(ename,'-',sal) from emp group by deptno;
###面试题
有个学生成绩表student, 字段有 id 主键、name、subject学科、score成绩
	create table student(id int primary key auto_increment,name varchar(10),subject varchar(10),score int);
保存以下数据：
	insert into student (name,subject,score) values ('张三', '语文', 66),('张三', '数学', 77),('张三', '英语', 55),('张三', '体育', 77)('李四','语文',59),('李四','数学',88),('李四','英语' ,78), ('李四', '体育',95),('王五','语文',75),('王五','数学',54),('王五','英语',98), ('王五', '体育',88);
1. 查询每个人的平均分 降序排序
	select name,avg(score) a from student group by name order by a desc;
2. 查询每个人的名字，以及这个人的科目和成绩 要求一行显示
	select name,group_concat(subject,'-',score) from student group by name;
3. 查询每个人的最高分和最低分
	select name,max(score),min(score) from student group by name;
4. 查询每个人不及格的科目及分数 不及格的科目数量
	select name,group_concat(subject,'-',score),count(*) from student where score<60 group by name;



















###课程回顾
1. 关联关系
- 一对一： AB两张表 A表中的一条对应B表中的一条，同时B表中的一条对应A表中的一条， 在从表中添加外键指向主表的主键
- 一对多： AB两张表 A表中的一条数据对应B表中的多条，同时B表中的一条对应A表中的一条，在多的表中添加外键指向另外一张表的主键
- 多对多： AB两张表 A表中的一条对应B表中的多条，同时B表中的一条对应A表中的多条数据，通过新建一张关系表建立关系
2. 权限管理案例： 3张主表：用户表 角色表 权限表   2张关系表：用户角色关系表，角色权限关系表

###面试题
1. 创建表 
	交易流水表： 交易号   交易时间  交易金额  交易类型  person_id 
	人物表： id 姓名 性别 关系 
	create table trade(id int primary key auto_increment,time datetime,money int,type varchar(10),person_id int);
	create table person(id int primary key auto_increment,name varchar(10),gender varchar(5), rel varchar(5));
2. 插入以下数据
	刘德华 男 亲戚 微信 发-20   2018-04-20
	杨幂 女 亲戚  现金  收500  发-50  2018-05-15
	马云 男 同事  支付宝 收20000 发-20  2018-05-20
	特朗普 男 朋友 微信 收2000  2018-04-22
	貂蝉 女 朋友 微信  发-20000  2018-03-14
	
	insert into person values(null,'刘德华','男','亲戚'),(null,'杨幂','女','亲戚'),(null,'马云','男','同事'),(null,'特朗普','男','朋友'),(null,'貂蝉','女','朋友');
	
	insert into trade values(null,'2018-4-20',-20,'微信',1),(null,'2018-5-15',500,'现金',2),(null,'2018-5-15',-50,'现金',2),(null,'2018-05-20',20000,'支付宝',3),(null,'2018-5-20',-20,'支付宝',3),(null,'2018-04-22',2000,'微信',4),(null,'2018-03-14',-20000,'微信',5);
3. 统计2018年2月15号到现在的所有红包收益
	select sum(money) from trade where time>str_to_date('2018年2月15号','%Y年%c月%d号');
4. 统计2018年2月15号到现在 金额大于100 所有女性亲戚的名字和红包金额
	select p.name,t.money
	from trade t join person p
	on t.person_id=p.id
	where t.money not between -100 and 100 and p.gender='女'
	and p.rel='亲戚' and time>str_to_date('2018年2月15号','%Y年%c月%d号');
5. 查询三个平台分别收入的红包金额
	select type,sum(money) from trade 
	where money>0 group by type;
###视图
- 什么是视图：视图和表都是数据库中的对象，视图可以理解成一张虚拟的表，视图本质就是取代了一段SQL查询语句
- 为什么使用视图：可以起到SQL语句重用的作用，隐藏敏感信息
- 创建视图的格式：
	create view 视图名 as (子查询);//创建了一个虚拟的表
	create table 表名 as (子查询);  //创建了一张真实存在的表
1. 创建一个10号部门员工的视图
	create view v_emp_10 as (select * from emp where deptno=10);
	select * from v_emp_10; 
2. 创建一个20号部门并且工资小于2000的视图
	create view v_emp_20 as (select * from emp where deptno=20 and sal<2000);
3. 创建一个没有工资的员工表的视图
	create view v_emp_nosal as (select empno,ename,job,mgr,hiredate,comm,deptno from emp);
	select * from v_emp_nosal;
4. 创建每个部门平均工资，最高工资，最底工资，工资总和，部门人数的视图
	create view v_emp_info as (select deptno,avg(sal),max(sal),min(sal),sum(sal),count(*) from emp group by deptno);
####视图的分类
1. 简单视图：创建视图的子查询中不包含：去重、函数、分组、关联查询的视图称为简单视图，可以对视图中的数据进行增删改查操作
2. 复杂视图：和简单视图相反，只能查询
####对简单视图进行增删改操作
1. 插入数据
	insert into v_emp_10 (empno,ename,sal,deptno) values(10010,'张三',888,10);
	select * from v_emp_10; //视图和原表中都存在
	- 测试往v_emp_10中插入一条部门编号为20号的数据
	insert into v_emp_10 (empno,ename,sal,deptno) values(10011,'李四',666,20);
	select * from v_emp_10; //视图中没有，原表中存在
- 往视图中插入一条视图中不可见但是原表中可见的数据 称为数据污染，可以通过 with check option 关键字解决数据污染的问题
	create view v_emp_30 as (select * from emp where deptno=30) with check option;
	insert into v_emp_30 (empno,ename,sal,deptno) values(10012,'王五',555,30);//成功！
	insert into v_emp_30 (empno,ename,sal,deptno) values(10013,'赵六',666,20);//失败！
2. 修改数据  只能修改视图中存在的数据
	update v_emp_10 set comm=comm+1;  //修改成功
	update v_emp_10 set sal=1000 where deptno=20; //修改失败
3. 删除数据 只能删除视图中存在的数据
	delete from v_emp_10 where ename='张三';//成功
	delete from v_emp_10 where ename='James';//失败 视图中不存在
####视图别名
- 如果创建视图的时候子查询使用了别名，则后期对视图进行操作时只能使用别名
	create view v_emp_name as (select ename name,sal from emp);
	select * from v_emp_name where name='王五';//成功
	select * from v_emp_name where ename='王五';//失败
####视图总结
1. 视图是数据库中的对象，代表一段SQL语句，可以理解成一张虚拟表
2. 作用： 重用SQL、 隐藏敏感信息
3. 分类： 简单视图（不包含去重、函数、分组、关联查询，可以进行增删改查）和复杂视图（和简单视图相反，只能查询）
4. 插入数据的数据污染问题 通过with check option解决
5. 修改和删除数据只能操作视图中存在的数据
6. 创建视图起别名的话 后期操作只能使用别名
####约束


	







 









	




